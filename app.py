import os
import asyncio
import sqlite3
import logging
from datetime import datetime
from typing import Dict, Set, Optional
import pandas as pd
from io import BytesIO

from telethon import TelegramClient, events, Button
from telethon.tl.types import User, DocumentAttributeFilename
from telethon.events import StopPropagation

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

API_ID = os.getenv('API_ID', '')
API_HASH = os.getenv('API_HASH', '')
BOT_TOKEN = os.getenv('BOT_TOKEN', '')
ADMIN_ID = int(os.getenv('ADMIN_ID', '0'))

try:
    from config import WELCOME_MESSAGE
    from config import FINAL_MESSAGE
    logger.info("Trying import config.py")
    logger.info(WELCOME_MESSAGE)
    logger.info(FINAL_MESSAGE)
except Exception as e:
    logger.info(e)
    WELCOME_MESSAGE = 'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏. –û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.'
    FINAL_MESSAGE = '‚úÖ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.'

info_string = f"""
API_ID={API_ID}
API_HASH={API_HASH}
BOT_TOKEN={BOT_TOKEN}
ADMIN_ID={ADMIN_ID}
DATABASE={os.getenv('DATABASE', '')}
WELCOME_MESSAGE={WELCOME_MESSAGE}
FINAL_MESSAGE = {FINAL_MESSAGE}
"""

logger.info(info_string)

class FeedbackBot:
    def __init__(self):
        self.client = TelegramClient('feedback_bot', API_ID, API_HASH)
        os.makedirs('/data', exist_ok=True)
        self.db_path = os.getenv('DATABASE', '')
        self.welcome_message = WELCOME_MESSAGE
        self.final_message = FINAL_MESSAGE
        self.active_conversations: Set[int] = set()  # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
        self.blocked_users: Set[int] = set()  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏

        # –í–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        questions = os.getenv('QUESTIONS', '')
        self.questions = [q.strip() for q in questions.split('|') if q != '']

        self.init_database()
        self.load_blocked_users()

    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö SQLite"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                first_name TEXT,
                last_name TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                is_blocked INTEGER DEFAULT 0
            )
        ''')

        # –¢–∞–±–ª–∏—Ü–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS feedback (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                answers TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (user_id) REFERENCES users (user_id)
            )
        ''')

        conn.commit()
        conn.close()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")

    def load_blocked_users(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM users WHERE is_blocked = 1")
        self.blocked_users = {row[0] for row in cursor.fetchall()}
        conn.close()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.blocked_users)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def save_user(self, user: User):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        cursor.execute('''
            INSERT OR REPLACE INTO users (user_id, username, first_name, last_name)
            VALUES (?, ?, ?, ?)
        ''', (user.id, user.username, user.first_name, user.last_name))

        conn.commit()
        conn.close()

    def save_feedback(self, user_id: int, answers: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ –≤ –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO feedback (user_id, answers)
            VALUES (?, ?)
        ''', (user_id, answers))

        conn.commit()
        conn.close()

    def block_user(self, user_id: int):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET is_blocked = 1 WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        self.blocked_users.add(user_id)

    def unblock_user(self, user_id: int):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET is_blocked = 0 WHERE user_id = ?", (user_id,))
        conn.commit()
        conn.close()
        self.blocked_users.discard(user_id)

    def get_all_users(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, username, first_name, is_blocked FROM users")
        users = cursor.fetchall()
        conn.close()
        return users

    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel"""
        conn = sqlite3.connect(self.db_path)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å JOIN
        query = '''
            SELECT
                u.user_id,
                u.username,
                u.first_name,
                u.last_name,
                f.answers,
                f.created_at
            FROM feedback f
            JOIN users u ON f.user_id = u.user_id
            ORDER BY f.created_at DESC
        '''

        df = pd.read_sql_query(query, conn)
        conn.close()

        # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏
        output_excel = BytesIO()
        with pd.ExcelWriter(output_excel, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='Feedback Report', index=False)
        output_csv = BytesIO()
        df.to_csv(output_csv, index=False)

        output_excel.seek(0)
        output_csv.seek(0)
        return output_excel, output_csv

    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""

        @self.client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start —Å conversation"""
            user_id = event.sender_id

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if user_id in self.blocked_users:
                #await event.respond("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
                raise StopPropagation

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id == ADMIN_ID:
                await self.show_admin_panel(event)
                raise StopPropagation

            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute("SELECT user_id FROM feedback")
            users = [row[0] for row in cursor.fetchall()]
            conn.close()

            if user_id in users:
                raise StopPropagation

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã
            self.active_conversations.add(user_id)

            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                self.save_user(event.sender)

                await event.respond(self.welcome_message)

                # –ù–∞—á–∏–Ω–∞–µ–º conversation
                async with self.client.conversation(user_id, timeout=300) as conv:
                    answers = []

                    for i, question in enumerate(self.questions):
                        await conv.send_message(f"**–í–æ–ø—Ä–æ—Å {i+1}/{len(self.questions)}:** {question}")
                        response = await conv.get_response()
                        answers.append(response.message)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                    user_info = f"üë§ **–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n"
                    user_info += f"**ID:** {user_id}\n"
                    user_info += f"**Username:** @{event.sender.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
                    user_info += f"**–ò–º—è:** {event.sender.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"

                    feedback_text = "üìù **–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:**\n"
                    for i, (question, answer) in enumerate(zip(self.questions, answers)):
                        feedback_text += f"**{i+1}.** {question}\n**–û—Ç–≤–µ—Ç:** {answer}\n\n"
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å –≤ –ë–î
                    self.save_feedback(user_id, feedback_text)

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                    buttons = [
                        [Button.inline("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", f"reply_{user_id}")],
                        [Button.inline("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", f"block_{user_id}"),
                        Button.inline("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", f"unblock_{user_id}")]
                    ]
                    await self.client.send_message(ADMIN_ID, user_info + feedback_text, buttons=buttons)
                    await conv.send_message(self.final_message)
                    self.block_user(user_id)

            except asyncio.TimeoutError:
                await event.respond("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å /start")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ start_handler: {e}")
                await event.respond("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            finally:
                # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
                self.active_conversations.discard(user_id)
            raise StopPropagation

        @self.client.on(events.NewMessage)
        async def message_forwarder(event):
            """–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É"""
            user_id = event.sender_id

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            if user_id == ADMIN_ID:
                return

            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∞–∫—Ç–∏–≤–Ω–æ–º conversation
            if user_id in self.active_conversations:
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if user_id in self.blocked_users:
                #await event.respond("‚ùå –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –±–æ—Ç—É.")
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –ë–î
            self.save_user(event.sender)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            forward_msg = f"üí¨ **–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n"
            forward_msg += f"**ID:** {user_id}\n"
            forward_msg += f"**Username:** @{event.sender.username or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            forward_msg += f"**–ò–º—è:** {event.sender.first_name or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
            forward_msg += f"**–°–æ–æ–±—â–µ–Ω–∏–µ:** {event.message.message}"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π
            buttons = [
                [Button.inline("‚úâÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", f"reply_{user_id}")],
                [Button.inline("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", f"block_{user_id}"),
                 Button.inline("‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", f"unblock_{user_id}")]
            ]
            await self.client.send_message(ADMIN_ID, forward_msg, buttons=buttons)

        @self.client.on(events.CallbackQuery)
        async def callback_handler(event):
            """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline –∫–Ω–æ–ø–æ–∫"""
            if event.sender_id != ADMIN_ID:
                await event.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω!")
                return

            data = event.data.decode()

            if data.startswith("reply_"):
                user_id = int(data.split("_")[1])
                # –ñ–¥—ë–º –æ—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                async with self.client.conversation(ADMIN_ID, timeout=300) as conv:
                    try:
                        await conv.send_message(f"üí¨ –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}:")
                        response = await conv.get_response()
                        await self.client.send_message(user_id, f"üì® **–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n{response.message}")
                        await conv.send_message("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é!")
                    except asyncio.TimeoutError:
                        await conv.send_message("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –∏—Å—Ç–µ–∫–ª–æ.")

            elif data.startswith("block_"):
                user_id = int(data.split("_")[1])
                self.block_user(user_id)
                await event.respond("üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")

            elif data.startswith("unblock_"):
                user_id = int(data.split("_")[1])
                self.unblock_user(user_id)
                await event.respond("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")

            elif data == "mass_broadcast":
                await self.handle_mass_broadcast(event)

            elif data == "generate_report":
                await self.handle_generate_report(event)

            elif data == "user_management":
                await self.show_user_management(event)

            elif data == "back_to_admin":
                await self.show_admin_panel(event)

    async def show_admin_panel(self, event):
        """–ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        admin_text = "üõ† **–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        buttons = [
            [Button.inline("üë• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏", "user_management")],
            [Button.inline("üì¢ –ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞", "mass_broadcast")],
            [Button.inline("üìä –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á—ë—Ç", "generate_report")]
        ]
        await event.respond(admin_text, buttons=buttons)

    async def show_user_management(self, event):
        """–ü–æ–∫–∞–∑ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
        users = self.get_all_users()
        if not users:
            await event.edit("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.",
                           buttons=[[Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_admin")]])
            return

        text = "üë• **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:**\n\n"
        buttons = []

        for user_id, username, first_name, is_blocked in users:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 10
            status = "üö´" if is_blocked else "‚úÖ"
            name = f"{first_name or '–ë–µ–∑ –∏–º–µ–Ω–∏'} (@{username or '–±–µ–∑ username'})"
            text += f"{status} {name} (ID: {user_id})\n"

            action = "unblock" if is_blocked else "block"
            action_text = "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" if is_blocked else "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å"
            buttons.append([Button.inline(f"{action_text} {user_id}", f"{action}_{user_id}")])

        buttons.append([Button.inline("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "back_to_admin")])
        await event.edit(text, buttons=buttons)

    async def handle_mass_broadcast(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
        async with self.client.conversation(ADMIN_ID, timeout=300) as conv:
            try:
                await event.delete()
                await conv.send_message("üì¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:")
                response = await conv.get_response()
                broadcast_msg = response.message

                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
                cursor.execute("SELECT user_id FROM users WHERE is_blocked = 0")
                users = [row[0] for row in cursor.fetchall()]
                conn.close()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                sent_count = 0
                failed_count = 0

                for user_id in users:
                    try:
                        await self.client.send_message(user_id, f"üì¢ **–†–∞—Å—Å—ã–ª–∫–∞:**\n\n{broadcast_msg}")
                        sent_count += 1
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                        failed_count += 1

                await conv.send_message(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                                      f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
                                      f"–û—à–∏–±–æ–∫: {failed_count}")

            except asyncio.TimeoutError:
                await conv.send_message("‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")

    async def handle_generate_report(self, event):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞"""
        try:
            await event.edit("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç—á—ë—Ç...")

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º Excel –æ—Ç—á—ë—Ç
            report_file_excel, report_file_csv = self.generate_report()
            filename_excel = f"feedback_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            filename_csv = f"feedback_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await self.client.send_file(
                ADMIN_ID,
                file=report_file_excel,
                caption="üìä –û—Ç—á—ë—Ç –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ .xlsx",
                attributes=[
                    DocumentAttributeFilename(file_name=filename_excel)
                ]
            )
            await self.client.send_file(
                ADMIN_ID,
                file=report_file_csv,
                caption="üìä –û—Ç—á—ë—Ç –ø–æ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ .csv",
                attributes=[
                    DocumentAttributeFilename(file_name=filename_csv)
                ]
            )
            await event.edit("‚úÖ –û—Ç—á—ë—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞: {e}")
            await event.edit("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á—ë—Ç–∞.")

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        await self.client.start(bot_token=BOT_TOKEN)
        await self.setup_handlers()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await self.client.run_until_disconnected()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    bot = FeedbackBot()
    asyncio.run(bot.start())
